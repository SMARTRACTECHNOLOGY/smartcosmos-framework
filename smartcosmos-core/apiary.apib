FORMAT: 1A
HOST: https://snapbundle.tagdynamics.net

# SnapBundle™ Platform API
SnapBundle™ is a platform purposefully built to be an application's contextual data store.

NOTE: This document is a **work in progress**.

# Group Registration Endpoints
Every SnapBundle Account belongs to a _security realm_. By default, the registration endpoint will extract the domain name from your email address. However, if you are using a popular email service like GMail or Yahoo, you **must** provide a custom realm name at registation. Use the **Realm Availability** endpoint to see if your desired realm name is available.   

Once you've identified a realm name, your ready to complete registration. Registering for an SnapBundle Account and then confirming the email address associated with the Account registration are the only perquisites for using the platform. These two steps are required before any endpoints that require authentication can be successfully accessed.

## Understanding Realms
The SnapBundle™ platform is a multi-tenant system by design. Each Account operates within its own _security realm_ in order to keep one Account's data separate from another Account's data. By default, the security realm is established _based on the Account registration email address' top level domain_. For example, registering for an Account with the email address developer@tagdynamics.com would result in the automatic assignment of the _tagdynamics.com_ realm, if it is available. It is possible to override this default behavior by including a _realm_ attribute in the JSON document submitted to the registration endpoint.

> If you are an Individual or a Developer registering with a popular email address from say yahoo.com, gmail.com, etc. then it is strongly recommended that you register using a unique, custom realm. This approach will allow the use of a individual email, e.g. you@yahoo.com, even though a realm like yahoo.com is prohibited. If you are an Enterprise, it is strongly recommended you omit the realm, which will automatically register your email address domain as your realm.

## Realm Availability [/registration/realm/{realm}]
### Checks to see if the named realm is available for registration [GET]

+ Parameters
    + realm (required, string, `foo.com`) ... Check to see if the named realm is available for registration

+ Response 200 (application/json)

            {
                "result": 0,
                "message" : "foo.com"
            }

## Account Registration [/registration/register]
### Register for a new SnapBundle account [POST]

+ Request (application/json)

            {
                "emailAddress": "you@foo.com",
                "realm" : "foobar.com"
            }

+ Response 200 (application/json)

    + Headers

            SnapBundle-Event: RegistrationRequest, AccountDefined
            
    + Body
    
            {
                "urn" : "urn:uuid:64618d0b-3b8c-456a-87d0-31bc1a0bc579",
                "lastModifiedTimestamp" : 1382828220349,
                "emailAddress" : "you@foo.com",
                "realm" : "foo.com",
            }

# Group Account Management Endpoints
The following endpoints offer self-service password management features.

## Account Details [/account]
### Display account details [GET]

+ Request

    + Headers

            Authorization: Basic eW91QGZvby5jb20gOiBOM3dzM2NyM3Q/
            
+ Response 200 (application/json)

    + Headers

            SnapBundle-Event: AccountAccessed
            
    + Body
    
            {
                "urn" : "urn:uuid:1234567890",
                "lastModifiedTimestamp" : 12345,
                "name" : "Foo",
                "description" : "Bar",
                "activeFlag" : true
            }

## Change Your Password [/account/password/change]
### Changes the authenticated user's password, presuming they know their existing password to change to a new password. [POST]

+ Request (application/json)

    + Headers

            Authorization: Basic eW91QGZvby5jb20gOiBOM3dzM2NyM3Q/
    + Body
    
            {
                "oldPassword" : "0lDs3cr3t!",
                "newPassword" : "N3ws3cr3t?"
            }

+ Response 200 (application/json)

    + Headers
    
            SnapBundle-Event : UserPasswordChanged
            
    + Body
    
            {
                "result" : 1,
                "message": "Password successfully changed"
            }

## Reset Lost Password [/account/password/reset]
### Triggers a password reset workflow via email for the specified Account associated with the indicated email address. [POST]

+ Request (application/json)
    
            {
                "emailAddress" : "you@foo.com"
            }

+ Response 200 (application/json)

    + Headers
    
            SnapBundle-Event : UserPasswordReset
            
    + Body   
    
            {
                "result" : 1,
                "message": "Password reset email has been sent"
            }
