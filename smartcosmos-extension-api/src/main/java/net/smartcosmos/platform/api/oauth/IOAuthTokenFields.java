package net.smartcosmos.platform.api.oauth;

/*
 * *#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*
 * SMART COSMOS Platform Server API
 * ===============================================================================
 * Copyright (C) 2013 - 2015 Smartrac Technology Fletcher, Inc.
 * ===============================================================================
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *      http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * #*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#
 */

import net.smartcosmos.model.base.IDomainResource;

/**
 * Represents the minimum set of fields used by most services, including SMART COSMOS, to represent an
 * OAuth 2.0 authorization scheme.
 *
 * @param <T> Domain object type from the object model, e.g. <code>IObject</code>
 */
public interface IOAuthTokenFields<T> extends IDomainResource<T>
{
    void setCSRFToken(String csrf);

    /**
     * Cross-site Request Forgery (CSRF) provided by the platform only when the page is generated. Since the token is
     * generated by the platform site, some other site can't mimic the request-- they won't have the token and therefore
     * can't post a fraudulent response to the platform.
     *
     * @return CSRF token
     */
    String getCSRFToken();

    /**
     * Identifies the time that the OAuth request was initiated by the extension point.
     *
     * @return
     */
    long getOAuthTransactionTimestamp();

    void setOAuthTransactionTimestamp(long timestamp);

    OAuthStatusType getAuthorizationCodeStatus();

    void setAuthorizationCodeStatus(OAuthStatusType authorizationCodeRequestStatus);

    /**
     * Authorization code issued by the system.
     *
     * @return
     */
    String getCode();

    void setCode(String code);

    /**
     * Extension provided arbitrary state to prevent cross-site forging.
     *
     * @return
     */
    String getState();

    /**
     * Arbitrary state provided by the extension point to prevent cross-site forging.
     *
     * @param state
     */
    void setState(String state);

    /**
     * Identifies the timestamp that the authorization code was issued.
     *
     * @return
     */
    long getCodeIssueTimestamp();

    String getToken();

    void setToken(String token);

    String getRefreshToken();

    void setRefreshToken(String refreshToken);

    long getTokenExchangeTimestamp();

    OAuthStatusType getBearerTokenStatus();

    void setBearerTokenStatus(OAuthStatusType tokenExchangeRequestStatus);

    long getTokenRefreshTimestamp();

    OAuthStatusType getRefreshTokenStatus();

    void setRefreshTokenStatus(OAuthStatusType tokenRefreshRequestStatus);
}
